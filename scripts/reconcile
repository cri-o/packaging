#!/usr/bin/env bash
set -euo pipefail

source "$(dirname "${BASH_SOURCE[0]}")"/helpers

OBS_PASSWORD=${OBS_PASSWORD:-}

setup_osc() {
    printf "[general]\napiurl = https://api.opensuse.org\n[https://api.opensuse.org]\n" >~/.oscrc
    echo user=cri-o-release-bot >>~/.oscrc
    echo "pass=$OBS_PASSWORD" >>~/.oscrc
}

submit_workflow() {
    echo "Running GitHub OBS workflow for revision: $1"
    gh workflow run obs -F revision="$1"
}

install_osc
setup_osc

PACKAGES=$(osc se --package cri-o)
PROJECT_PREFIX=isv:kubernetes:addons:cri-o
PROJECT_PRERELEASE_PREFIX=$PROJECT_PREFIX:prerelease
BUILD_PROJECT_SUFFIX=:build/cri-o

ACTIVE_VERSIONS=$(curl_retry https://raw.githubusercontent.com/cri-o/cri-o/refs/heads/main/internal/version/version.go | sed -En "s/.*ReleaseMinorVersions.*\{(.*)\}/\1/p")
echo "Found active versions: $ACTIVE_VERSIONS"

echo "Iterating prerelease packages"
for PROJECT in $(echo "$PACKAGES" | grep "$PROJECT_PRERELEASE_PREFIX:.*:build.*cri-o" | tr -s '[:blank:]', '/'); do
    echo "Searching project: $PROJECT"
    VERSION=${PROJECT#"$PROJECT_PRERELEASE_PREFIX:"}
    VERSION=${VERSION%"$BUILD_PROJECT_SUFFIX"}

    if [[ "$ACTIVE_VERSIONS" != *"${VERSION#v}"* ]]; then
        echo "Skipping unsupported prerelease version: $VERSION"
        continue
    fi

    BRANCH=main
    if [[ $VERSION =~ v.* ]]; then
        BRANCH=release-${VERSION#v}
    fi

    echo "Using branch: $BRANCH"
    submit_workflow "$BRANCH"

    RELEASE_PROJECT=${PROJECT%"$BUILD_PROJECT_SUFFIX"}
    echo "Cleanup old packages in: $RELEASE_PROJECT"
    mapfile -t RELEASE_PACKAGES < <(osc ls "$RELEASE_PROJECT")

    MAX_LEN=4
    if [[ ${#RELEASE_PACKAGES[@]} -ge $MAX_LEN ]]; then
        for ((i = 0; i < MAX_LEN; i++)); do
            unset 'RELEASE_PACKAGES[-1]'
        done

        echo "Keeping last $MAX_LEN packages in project $RELEASE_PROJECT, removing the rest"
        for PACKAGE in "${RELEASE_PACKAGES[@]}"; do
            osc rdelete -m cleanup "$RELEASE_PROJECT" "$PACKAGE"
        done
    fi
done

PREFIX=cri-o_
SUFFIX=.orig.tar.gz
PROJECT_STABLE_PREFIX=$PROJECT_PREFIX:stable

echo "Iterating stable packages"
for PROJECT in $(echo "$PACKAGES" | grep "$PROJECT_STABLE_PREFIX:.*:build.*cri-o" | tr -s '[:blank:]', '/'); do
    echo "Searching project: $PROJECT"
    VERSION=
    for FILE in $(osc ls "$PROJECT"); do
        if [[ $FILE =~ $PREFIX.*$SUFFIX ]]; then
            VERSION=${FILE#"$PREFIX"}
            VERSION=v${VERSION%"$SUFFIX"}
        fi
    done

    NO_VERSION_FOUND=0
    if [[ $VERSION == "" ]]; then
        VERSION=${PROJECT#"$PROJECT_STABLE_PREFIX:"}
        VERSION=${VERSION%"$BUILD_PROJECT_SUFFIX"}.0
        echo "No version found for project '$PROJECT', assuming $VERSION"
        NO_VERSION_FOUND=1
    else
        echo "Found latest OBS version '$VERSION' for project: $PROJECT"
    fi

    LATEST_VERSION=$(curl_retry "https://storage.googleapis.com/cri-o/latest-$(echo "$VERSION" | cut -c2-5).txt" || echo -n "")
    if [[ "$LATEST_VERSION" == "" ]]; then
        echo "No latest release found for OBS version '$VERSION'"
    elif [[ "$LATEST_VERSION" != "$VERSION" ]]; then
        echo "Latest release version '$LATEST_VERSION' is not matching OBS latest version '$VERSION'"
        submit_workflow "$LATEST_VERSION"
    elif [[ $NO_VERSION_FOUND == 1 ]]; then
        echo "Latest release version '$LATEST_VERSION' is not existing in OBS"
        submit_workflow "$LATEST_VERSION"
    else
        echo "Latest release '$LATEST_VERSION' already available in project: $PROJECT"
    fi
done
